[基本的な使い方]

<コンパイル時のオーバーフローチェック>
ソースコード：
  foo.c foo.sh foo.txt

・-D_FORTIFY_SOIRCE=1 と定義してコンパイルすると、ソースと
デスティネーションのバイト数がコンパイル時にわかるときは、
バッファーオーバーフローが発生する場合に、コンパイラが指摘する。
ただし、gccではデフォルトで _FORTIFY_SOURCE が定義されているので、
最初にundefしてからサイド定義する必要がある(foo.sh)

	-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1


<ランタイムのオーバーフローチェック>
ソースコード：
  bar.c bar.sh bar.txt

・-D_FORTIFY_SOIRCE=1 と定義してコンパイルすると、ディスティネーションの
バイト数がコンパイル時にわかるときは、実行時にバッファーオーバーフローを
検出する(bar.sh)
ただし、ディスティネーションのバイト数がコンパイル時にわからないときは、
実行時にもバッファーオーバーフローを検出することができない(bar2.sh)


[チェックの強化]
ソースコード：
  baz.c baz.sh baz.txt

・-D_FORTIFY_SOURCE=2 と定義してコンパイルすると、printf の書式制御文字列に
%n が含まれているときにも abort する(baz.sh)


[チェックされる関数一覧]
コマンド：
  all_chk.sh

・/usr/include以下のヘッダーファイルを調べると(all_chk.sh)、トータルで
81個の関数が対象となっている
