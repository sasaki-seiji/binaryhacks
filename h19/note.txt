[同名シンボルの衝突]
実行結果：readelf-d_main-shared.txt
C/C++プログラム：
 a.c, b.c, main.c link_objects.txt
 a.c, b.c, link_to_shared.txt
 a.c, b.c, main.c link_archive.txt
 a.c, b.c, main.c link_shared_objects.txt
 
(.oファイルをまとめてリンクする場合)

・同一名の関数を2つのソースファイルで定義している場合、オブジェクトファイル
をリンクする段階でリンクエラーがでる（link_objects.txt）

・同様に、同一名の関数定義を含む2つのオブジェクトファイル（これらは-fPIC
コンパイル） を１つの共有オブジェクトにリンクするときもリンクエラーが出る
（link_to_shared.txt）

（ライブラリを使ってリンクする場合）

・同一名の関数定義を含む2つのオブジェクトファイルを１つの静的ライブラリに
まとめてmainプログラムとリンクすると、リンク時のエラーは出ない。この場合、
静的ライブラリ内で最初に見つかった定義が拾われる（link_archive.txt）

・同様に、同一名の関数定義を含む2つのオブジェクトファイルから別々の静的
ライブラリを作り、この2つの静的ライブラリをmainプログラムとリンクすると、
リンク時のエラーは出ない。
この場合、リンクコマンドにて最初に現れる静的ライブラリから関数の定義が
拾われる （link_arhive.txt）
ここで、libfoo.aを一旦削除しているのは、古いlibfoo.aの状態が残っていては
まずいからである

・同一名の関数定義を含む2つのソースとmainのソースから別々の共有オブジェクト
をつくり（これらは、-fPICでコンパイルする）、これらをリンクすると、リンクの
エラーは出ない。
この場合、リンクコマンドにて最初に現れる共有オブジェクトから関数の定義が
拾われる（link_shared_objects.txt）

・本に記載の、./a.so ./b.so ./main.so の順でリンクすると、func関数が
見つからない旨のエラーが出る。未定義シンボルがコマンドラインのライブラリ
から順次検索されるので、funcを参照しているmain.soを先頭に置かなければ
ならないためである（正しい並びは、./main.so ./a.so ./b.so）。

・リンクコマンドの引数からパス指定を取り除くと（main.so a.so b.soのように
する）、実行時に共有オブジェクトが見つからない旨のエラーが出る。この場合、
LD_LIBRARY_PATH環境変数にカレントディレクトリを指定する必要がある。

・リンクコマンドに共有オブジェクトをパス付きで指定したとき、LD_LIBRARY_PATH
環境変数を設定する必要がないのは、作成された実行可能ファイル（main-shared）
の動的セクションのNEEDEDタイプに、依存する共有ライブラリ名がパス付きで格納
されるためである（readelf-d_main-shared.txt）


[C++と同名クラス]
実行結果：
C++プログラム：
 a.h, a.cpp, main.cpp, tax1.txt
 a.h, a.cpp, b.cpp, main.cpp, tax2.txt
 
・消費税込みのりんごの値段を表示するプログラム（a.cpp、main.cpp）をビルドし
実行する。結果は、105円となる（tax1.txt）。ここでは、共有オブジェクト
ファイルの並び順は、./a.so ./main.so ではなく、./main.so ./a.so でなければ
ならない
　
・ここで、同名のTaxクラスを実装したb.cppの共有オブジェクト./b.soを./a.so
より前にリンクコマンドの引数に並べると、Tax::Tax()はb.soから、Tax::tax(int)
はa.soから拾われるという、矛盾した状態となる。
b.cppのTax::Tax()は、データメンバdeduction_rate_に値0.1を設定するが、この
メモリレイアウトが、a.cppのTaxクラスのデータメンバconsumption_tax_と同じ位置
に存在する。
このため、a.cppのTax::tac(int)はconsumption_tax_データメンバを読み出すと
0.1となる。その結果、りんごの値段は10となる(tax2.txt)

[weakシンボル]
実行結果：nm_demangle__weak.txt
C++プログラム：
　weak_main.cpp, weak_a.cpp, weak_symbol.txt
　unnamed_namespace_main.cpp, weak_a.cpp, unnamed_namespace.txt
　
・Fooクラスを含むC++プログラムweak_main.cppをビルドし実行する。これは正しく
動作する
次に、同名のクラスFooを含む別のC++プログラムweak_a.cppをコンパイルして、
weak_main.oと一緒にリンクして実行すると、期待した出力結果とならない
（weak_symbol.txt）

・weak_main.cppのFoo::Foo(int)はクラス内に定義されているので、inline関数と
なる。
一方、weak_a.cppのFoo::Foo(int)はクラス定義の外部で定義されているので、
inlineではない、通常の関数となる。inline関数はweakシンボルとなるので、
非weakなweak_a.cppの関数がリンク時に選択されるので、意図しない結果となった

・nmコマンドでシンボルクラスを確認すると、weak_main.oのFoo::Foo(int)はweakで
weak_a.oのFoo::Foo(int)は非weakであることがわかる（nm_demange__weak.txt）

・mainプログラムが利用しているFooクラスの定義を無名名前空間に収め、Fooクラス
が定義した名前がソースファイルのスコープとなる（つまりシンボルをリンカに
出さない）ように変更すれば（unnamed_namespae_main.cpp）、この問題は解消する
（unnamed_namespace.txt）








