[ELFヘッダの読み出し]
実行結果：readelf-h__executable.txt, readelf-h__object.txt, 
 readelf-l__executable.txt, readelf-l__object.txt, readelf-S__executable.txt,
 readelf-S__object.txt, readelf-e__executable.txt, readelf-e__object.txt
Cプログラム：sample.c

・サンプルプログラムsample.cから作成されたオブジェクトファイルsample.oと
実行可能ファイルsampleに対して、ELFヘッダの読み出しを行う

・ELFファイルヘッダでは、実行可能ファイルの型は、DYN (共有オブジェクトファイル)で、
オブジェクトファイルの型は、REL (再配置可能ファイル)となっている

・オブジェクトファイルはプログラムヘッダを持っていない


[ELF情報の読み出し]
実行結果：readelf--syms__executable.txt, readelf--syms__object.txt,
 readelf--relocs__executable.txt, readelf--relocs_object.txt,
 readelf--dynamic__executable.txt, readelf--dynamic__object.txt,
 readelf--version-info__executable.txt, readelf--version-info__object.txt,
 readelf--arch-specific__executable.txt, readelf--arch-specific__object.txt,
 readelf--histogram__executable.txt, readelf--histogram__object.txt,
 readelf--all__executable.txt, readelf--all__object.txt,
 readelf--notes__executable.txt, readelf--notes__object.txt,
 readelf--unwind__executable.txt, readelf--unsind__object.txt
Cプログラム：sample.c
 
・サンプルプログラムsample.cから作成されたオブジェクトファイルsample.oと
実行可能ファイルsampleに対して、ELF情報の読み出しを行う

・この例では、オブジェクトファイルsample.oに含まれているシンボルはすべて実行可能
ファイルsampleにも含まれている。ただし、標準ライブラリ呼び出しputsは、sampleでは、
puts@@GLIBC_2.2.5 と、ライブラリ指定が加えられている
 
・この例では、オブジェクトファイルに含まれている再配置情報の型は、R_X86_64_PLT32 
と R_X86_64_PC32 であり、実行可能ファイルに含まれている型は、R_X86_64_RELATIVE、
R_X86_64_GLOB_DAT、R_X86_64_JUMP_SLO となっている。
AMD64の再配置情報の型の一覧は[1]を参照

・この例のオブジェクトファイルにはダイナミックセグメントとバージョンセクションは
含まれてない

・この例では、オブジェクトファイル、実行可能ファイルともアーキテクチャ依存情報は
含まれない（含まれない旨のメッセージも出力されない）

・実行可能ファイルにはバケットリスト長のヒストグラムが含まれるが、オブジェクト
ファイルには含まれていない

・オブジェクトファイルには、NT_GNU_PROPERTY_TYPE_0ノートが含まれている。実行可能
ファイルにはこれに加えて、NT_GNU_BUILD_ID (一意なビルドID ビット列)ノートと、
NT_GNU_ABI_TAG (ABI バージョンタグ)ノートが含まれている


（参考情報）
[1] AMD64の再配置情報の型
http://www.ucw.cz/~hubicka/papers/abi/node19.html

