[C/C++とシンボル名]
実行結果：dbg.txt
C/C++プログラム：dbg.c

・プログラムdbg.cをC及びC++でコンパイルし、関数dbgのシンボル情報を確認する
（dgb.txt）

[C++からCの関数を呼び出す]
実行結果：nm_sample.o.txt, nm_sample_no_extern_c.o.txt
C/C++プログラム：
 dbg.c, sample.cpp, sample.txt, 
 sample_no_extern_c.cpp, sample_no_extern_c.txt
 
・Cプログラム（dbg.c）が定義した関数のプロトタイプ宣言にextern "C"をつけると
C++プログラム（sample.cpp）からC関数を呼び出すことができる（sample.txt）

・これに対して、C++プログラムから呼び出すC関数のプロトタイプ宣言にextern "C"
をつけないと、リンク時にundefined referenceエラーとなる
（sample_no_extern_c.cpp, sample_no_extern_c.txt）

・extern "C"あり・なしのオブジェクトファイルのシンボル情報を確認すると、
呼び出すC関数(dbg)のシンボルがマングルされていない（extern "C"あり）、
されている （extern "C"なし）と違いが生じている（nm_sample.o.txt, 
nm_sample_no_exter_c.o.txt）


[注意：extern "C"すると引数の型の一致が検査できない]
実行結果：
C/C++プログラム：
 dbg.c, sample_proto_error.cpp, sample_proto_error.txt
 dbg.h, dbg_header.c, sample_header.cpp, sample_header.txt
 
・Cの関数を呼び出すC++ソースコード(sample_proto_error.cpp)で、C関数の
プロトタイプ宣言に間違いがあってもリンクできててしまうが、実行時に
エラーとなる。これはリンク時には関数の引数型情報がなくっているためである
（sample_proto_error.txt）

・この問題を避けるためには、Cプログラム側で、CでもC++でもインクルード可能な
ヘッダファイルを用意する（dbg.h）。C++ソースでdbg関数の誤用があれば
コンパイル時にエラーが出る（sample_header.txt）


[CからC++の関数を呼び出す]
実行結果：
C/C++プログラム：gcd.h, gcd.cpp, sample_gcd.c, sample_gcd.txt

・boostがインストールされていないときは、以下のコマンドでインストールする
	$ sudo apt install libboost-all-dev
バージョン1.71のboostがインストールされた

・最大公約数を求めるプログラムをビルドする（sample_gcd.txt）。
deprecatedワーニングが出るので、ヘッダのパスと、gcd呼び出しの名前空間指定を
変更した（gcd.cpp）


[C++の関数は例外をCの関数側に漏らしてはならない]
実行結果：
C/C++プログラム：
 catch.cpp, sample_catch.c, sample_catch.txt
 throw.cpp, sample_throw.c, sample_throw.txt
 
・C++ソースcatch.cppは、本に記載のように、C++関数内で例外を補足して、
呼び出し側のC関数に例外を漏らさないようにしている。これをビルドして実行する
と正常終了する（sample_catch.txt）

・これに対して、C++ソースthrow.cppは、C++関数から例外を呼び出し元に
スローしている。これをC関数から呼び出すと、プログラムは異常終了する
（sample_throw.txt）


[注意：関数ポインタを扱うCの関数に注意]
実行結果：
C/C++プログラム：sample_qsort.cpp, sample_qsort.txt

・Cの関数qsortのコールバック関数（これはC++の関数）から例外をスローする
例題。ビルドして実行すると、qsort内を例外が通過しているが、正常終了している
(sample_qsort.txt)

